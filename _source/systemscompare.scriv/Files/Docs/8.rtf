{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fnil\fcharset0 Cochin;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 Reaktor is a graphical modular software music studio developed my Native Instruments in 1996.  Users can combine or use it's preset modules to build their own synthesizer instruments, samplers, effects and sound design tools. As a commercial software, it supplies many factory preset libraries of instruments and effects, from emulations of classic synthesizers to futuristic sound design tools.  In addition Reaktor also has an active community that users build their own libraries for different purposes e.g. DJ platforms. \
\
Reaktor can work as an independent application or plugin within a DAW software, it's graphical patching interface gives users freedom to patch different synthesis modules like modular synthesizers.  Modules can also be categorized into hierarchy for better patching management.  Users can start tweaking modules by editing factory preset objects.  Also, building GUI within Reaktor is easy with it's build-in graphical contents or use custom designed look and feel of their instruments. \
\
Besides MIDI control as input source. The new version of Reaktor supports OSC messages as input sources, users can use any OSC controllers or sensors to control or interact with Reaktor instruments.  However because Reaktor is a closed environment, it does not provide user defined mapping algorithms for controlling.  It's using standard 0-127 midi values for parameter controls.\
\
The strength is Reaktor is it's rich library and sound bank are ready to use for users and sound designers.  Reaktor instruments, libraries, ensembles can only be executed within Reaktor environment, it can not be compiled to a standalone application or mobile app.}